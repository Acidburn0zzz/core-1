module "Core"

args =
  bridge: new GuideGuideHTMLBridge({testMode: true})
  messages: new GuideGuideMessages "en_us"

gg = new GuideGuideCore(args)

asyncTest "can init", ->
  new GuideGuideCore args, (args) ->
    ok args.bridge, "no bridge given"
    ok args.messages, "no messages object given"
    start()

test "can log", ->
  equal gg.log("foo"), "foo"

test "can create button object", ->
  propEqual gg.button("Ok","foo",true), {label:"Ok", callback: "foo", primary: true}

test "can open url", ->
  equal gg.openURL("http://foo.com"), "http://foo.com"

test "can toggle guides", ->
  equal gg.toggleGuides(), true

test "can add top quick guide", ->
  equal gg.quickGuide("top"), "|~(hp)"

test "can add horizontal midpoint quick guide", ->
  equal gg.quickGuide("horizontalMidpoint"), "~|~(hp)"

test "can add bottom quick guide", ->
  equal gg.quickGuide("bottom"), "~|(hp)"

test "can add left quick guide", ->
  equal gg.quickGuide("left"), "|~(vp)"

test "can add vertical midpoint quick guide", ->
  equal gg.quickGuide("verticalMidpoint"), "~|~(vp)"

test "can add right quick guide", ->
  equal gg.quickGuide("right"), "~|(vp)"

test "can clear all guides", ->
  guides = [
    { location: 1, orientation: "horizontal" },
    { location: 3, orientation: "horizontal" },
    { location: 5, orientation: "horizontal" }
  ]
  propEqual gg.clearGuides(), []

test "can clear some guides", ->
  guides = [
    { location: 1, orientation: "horizontal" },
    { location: 3, orientation: "horizontal" },
    { location: 5, orientation: "horizontal" }
  ]
  out = [
    { location: 1, orientation: "horizontal" },
    { location: 5, orientation: "horizontal" }
  ]
  originalInfo = Fauxtoshop.testInfo
  Fauxtoshop.testInfo =
    hasOpenDocuments: true
    isSelection: true
    width: 2
    height: 2
    offsetX: 2
    offsetY: 2
    ruler: 'pixels'
    existingGuides: guides

  propEqual gg.clearGuides(), out
  Fauxtoshop.testInfo = originalInfo

test "can donate", ->
  equal gg.donate(), "http://guideguide.me/donate"

test "can save data", ->
  equal gg.saveData().application.name, "GuideGuide web"

test "can get guides from GuideGuide Notation", ->
  info =
    width: 100
    height: 100
    offsetX: 0
    offsetY: 0
  guides = gg.getGuidesFromGGN new GGN("|10px|(hp)"), info
  propEqual guides, [{ location: 0, orientation: "horizontal"}, { location: 10, orientation: "horizontal"}]

test "can get document info", ->
  testInfo =
    hasOpenDocuments: true
    isSelection: false
    width: 100
    height: 100
    offsetX: 0
    offsetY: 0
    ruler: 'pixels'
    existingGuides: []

  propEqual gg.getDocumentInfo(), testInfo

in1 = [
  { location: 1, orientation: "horizontal" },
  { location: 3, orientation: "horizontal" }
]
in2 = [
  { location: 3, orientation: "horizontal" },
  { location: 5, orientation: "horizontal" }
]
bounds =
  top: 2
  bottom: 4
  left: 2
  right: 4

test "can consolidate guides", ->
  out = [
    { location: 1, orientation: "horizontal" },
    { location: 3, orientation: "horizontal" },
    { location: 5, orientation: "horizontal" }
  ]
  propEqual gg.consolidate(in1, in2), out

test "can consolidate guides with bounds", ->
  out = [ { location: 3, orientation: "horizontal" } ]
  propEqual gg.consolidate(in1, in2, { bounds: bounds }), out

test "can consolidate guides with bounds inverted", ->
  out = [
    { location: 1, orientation: "horizontal" },
    { location: 5, orientation: "horizontal" }
  ]
  propEqual gg.consolidate(in1, in2, { bounds: bounds, invert: true }), out

test "can add guides", ->
  guides = [{location: 0, orientation: "vertical"}, {location: 10, orientation: "vertical"}]
  equal gg.addGuides(guides), guides

test "can add guides from GuideGuide Notation", ->
  out = [
    { location: 0, orientation: "horizontal" },
    { location: 10, orientation: "horizontal" }
  ]
  propEqual gg.addGuidesfromGGN('|10px|(ph)','grid'), out

test "can record usage", ->
  usage1 = $.extend {}, gg.recordUsage("top", 10)
  usage2 = gg.recordUsage("top", 10)
  equal usage2.top, usage1.top+1
  equal usage2.lifetime, usage1.lifetime + 10
  equal usage2.guideActions, usage1.guideActions + 1

test "can get sum", ->
  equal gg.sum([1,2]), 3

test "can get sum with key", ->
  equal gg.sum([{ foo: 1, bar: 5 }, { foo: 2, bar: 5 }], "foo"), 3

asyncTest "can check for updates", ->
  gg.checkForUpdates (data) =>
    equal $.type(data), "object"
    start()
