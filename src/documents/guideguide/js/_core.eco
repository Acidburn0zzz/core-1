---
write: false
---

class GuideGuide
  constructor: (@panel) ->
    @panel.on 'click', '.js-custom-form .js-make-grid', @onMakeGridFromCusom
    @panel.on 'click', '.js-sets-form .js-make-grid', @onMakeGridFromSet
    @panel.on 'click', '.js-custom-form .js-new-set', @onShowCustomNewSetForm
    @panel.on 'click', '.js-sets-form .js-new-set', @onShowSetsNewSetForm
    @panel.on 'click', '.js-grid-form .js-save-set', @onSaveSetFromGrid
    @panel.on 'click', '.js-custom-form .js-save-set', @onSaveSetFromCustom
    @panel.on 'click', '.js-sets-form .js-edit-set', @onEditSet
    @panel.on 'guideguide:hasUpdate', @onHasUpdate
    @panel.on 'focus', '.js-custom-form .js-custom-input', @onFocusCustomForm
    @panel.on 'blur', '.js-custom-form .js-custom-input', @onBlurCustomForm
    @panel.on 'focus', '.js-grid-form .js-grid-form-input', @onFocusFormInput
    @panel.on 'click', '.js-grid-form .js-make-grid', @onMakeGridFromForm
    @panel.on 'focus', '.js-set-name', @onFocusSetName
    @panel.on 'click', '.js-show-logs', @onClickShowLogs

  # Clear any error reporting text and reset the Custom forms's validation
  #
  # Returns nothing.
  onFocusCustomForm: (event) =>
    $input = $(event.currentTarget)
    $input.val $input.val().replace(/[\{\}]|\[.*?\]|^#.*?$/gm, '').replace(/\s+$/g,'')

  # Validate the contents of the Custom form
  #
  # Returns nothing.
  onBlurCustomForm: (event) =>
    $input = $(event.currentTarget)
    if string = $input.val().replace /^\s+|\s+$/g, ''
      ggn = new GGN $input.val()
      $input.trigger 'input:invalidate' if !ggn.isValid
      $input.val ggn.toString()
      $input.trigger('autosize.resize')

  # Show the debug logs.
  #
  # Returns nothing.
  onClickShowLogs: =>
    event.preventDefault()
    @bridge.showLogs() if @bridge.showLogs

  # Open Custom form with data from the set to be edited
  #
  # Returns nothing.
  onEditSet: (event) =>
    event.preventDefault()
    $('#guideguide').find('.js-custom-tab').click()

    $set  = $(event.currentTarget).closest('.js-set')
    id    = $set.attr('data-id')
    group = $set.attr('data-group')

    set = @guideguideData.sets[group].sets[id]

    $form = @panel.find('.js-custom-form')
    $form.find('.js-set-name').val(set.name)
    $form.find('.js-set-id').val(set.id)

    @showCustomSetForm(set.string)

  # Save a set from the Custom form.
  #
  # Returns nothing.
  onSaveSetFromCustom: (event) =>
    event.preventDefault()
    $form      = @panel.find('.js-custom-form')
    string     = $('.js-custom-input').val().replace /^\s+|\s+$/g, ''
    name       = $form.find('.js-set-name').val()
    executable = $form.find('.js-input.is-invalid').length == 0 and string.length > 0 and name.length > 0

    if executable
      obj =
        oldID: $form.find('.js-set-id').val()
        id: @generateSetID
          name: name
          string: string
        group: "Default"
        name: name
        string: string

      if !$('#guideguide').find('.js-set-id').val()
        @createNewSet(obj)
      else
        @updateSet(obj)

      @panel.find('.js-sets-tab').click()
    else
      $('.js-set-name').trigger 'input:invalidate' if name.length == 0
      $('.js-custom-input').trigger 'input:invalidate' if string.length == 0

  # Fire save set event and pass it the contents of the grid form
  #
  # Returns nothing.
  onSaveSetFromGrid: (event) =>
    event.preventDefault()
    $form      = @panel.find('.js-grid-form')
    data       = @getFormData $form
    @stringifyFormData data, (string) =>
      executable = $form.find('.js-input.is-invalid').length == 0 and string

      if executable
        @bridge.log 'New set from form'
        @bridge.log string
        obj =
          name: data.name
          ggn: string

        @createNewSet(obj)
        @panel.find('.js-sets-tab').click()

  # Create a grid from the Grid form
  #
  # Returns Nothing.
  onMakeGridFromForm: (event) =>
    event.preventDefault()
    $form  = $(event.currentTarget).closest '.js-grid-form'
    @stringifyFormData @getFormData($form), (string) =>
      return unless $form.find('.js-input.is-invalid').length == 0 and string
      @addGuidesfromGGN string, 'grid'

  # Create a grid from the Custom form
  #
  # Returns nothing.
  onMakeGridFromCusom: (event) =>
    event.preventDefault()
    $form  = @panel.find('.js-custom-form')
    string = @panel.find('.js-custom-input').val().replace(/^\s+|\s+$/g, '')
    return unless $form.find('.js-input.is-invalid').length == 0 and string
    @addGuidesfromGGN string, 'custom'

  # Create a grid from a set
  #
  # Returns nothing.
  onMakeGridFromSet: (event) =>
    event.preventDefault()
    $set = $('.js-set-list').find('.is-selected').first()
    return unless $set.length
    id    = $set.attr 'data-id'
    group = $set.attr 'data-group'
    data  = @guideguideData.sets[group].sets[id]
    @addGuidesfromGGN data.string, 'set'

  createNewSet: (data) =>
    newSet =
      id: @generateSetID data
      name: data.name
      string: data.string

    @guideguideData.sets["Default"].sets[newSet.id] = newSet
    @saveGuideGuideData()
    @refreshSets()

  updateSet: (data) =>
    delete @guideguideData.sets[data.group].sets[data.oldID]
    newSet =
      name: data.name
      string: data.string

    newSet.id = @generateSetID newSet

    @guideguideData.sets[data.group].sets[data.id] = newSet

    @saveGuideGuideData()
    @refreshSets()

  # Handle clicks on the new set button
  #
  # Returns nothing
  onShowCustomNewSetForm: (event) =>
    event.preventDefault()
    @showCustomSetForm()

  onShowSetsNewSetForm: (event) =>
    event.preventDefault()

    @bridge.getDocumentInfo (info) =>
      xString = ''
      yString = ''
      string  = ''

      prevHorizontal = if info.isSelection then info.offsetY else 0
      prevVertical = if info.isSelection then info.offsetX else 0
      guides = info.existingGuides

      if info.isSelection
        bounds =
          top:    info.offsetY
          left:   info.offsetX
          bottom: info.offsetY + info.height
          right:  info.offsetX + info.width
        guides = @consolidateGuides [guides, info.existingGuides], bounds

      if guides
        guides.sort (a,b) =>
          a.location - b.location

        $.each guides, (index, guide) =>
          if guide.orientation == 'vertical'
            xString = "#{ xString }#{ guide.location - prevVertical }px | "
            prevVertical = guide.location
          if guide.orientation == 'horizontal'
            yString = "#{ yString }#{ guide.location - prevHorizontal }px | "
            prevHorizontal = guide.location

        xString = "#{ xString }(v#{ 'p' if @guideguideData.settings.calculation == 'pixel' })" if xString != ''
        yString = "#{ yString }(h#{ 'p' if @guideguideData.settings.calculation == 'pixel' })" if yString != ''

        string += xString
        string += '\n' if xString
        string += yString
        string += '\n' if yString
        string += '\n# ' + @messages.ggnStringFromExistingGuides() if xString or yString

      @showCustomSetForm string

  # On the Grid page, display and focus new set name field, swap in save set
  # and cancel set buttons, hide make grid and new set buttons.
  #
  # Returns nothing.
  showCustomSetForm: (prefill = '') =>
    @panel.find('.js-custom-tab').click() if @panel.find('.js-sets-tab.is-selected').length
    @panel.addClass('is-showing-new-set-form')
    @updateCustomField prefill if prefill
    @panel.find('.js-custom-form').find('.js-set-name').focus()
